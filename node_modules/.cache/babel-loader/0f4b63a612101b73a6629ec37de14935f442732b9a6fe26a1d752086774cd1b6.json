{"ast":null,"code":"var _jsxFileName = \"/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\nconst GifPicker = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [limitExceeded, setLimitExceeded] = useState(false);\n  const [prevResults, setPrevResults] = useState([]);\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`);\n        const data = await response.json();\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map(gif => ({\n            id: gif.id,\n            images: gif.images\n          }));\n          setPrevResults(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n    fetchRandomGifs();\n  }, []);\n  const searchGifs = async () => {\n    if (query.trim() === \"\") {\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    try {\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(query)}&limit=10`);\n      const data = await response.json();\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map(gif => ({\n          id: gif.id,\n          images: gif.images\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n    setLoading(false);\n  };\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n  const copyToClipboard = url => {\n    navigator.clipboard.writeText(url).then(() => {\n      setCopied(true);\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    }).catch(error => {\n      console.error(\"Error copying GIF URL to clipboard:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: searchGifs,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error occurred while searching GIFs. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), limitExceeded && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"API limit reached. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }, this), prevResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Previous Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: prevResults.map(gif => /*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: gif.images.fixed_width.mp4,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)\n        }, gif.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), gifs.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Search Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gifs.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            autoPlay: true,\n            loop: true,\n            muted: true,\n            children: /*#__PURE__*/_jsxDEV(\"source\", {\n              src: gif.images.fixed_width.mp4,\n              type: \"video/mp4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => copyToClipboard(gif.images.fixed_width.mp4),\n            children: \"Copy GIF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)]\n        }, gif.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : !loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No results found for this name.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }, this), copied && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"GIF copied to clipboard!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(GifPicker, \"7MJBgTPh3Ip48hNg3pi26M2zxyw=\");\n_c = GifPicker;\nexport default GifPicker;\nvar _c;\n$RefreshReg$(_c, \"GifPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_KEY","GifPicker","_s","query","setQuery","gifs","setGifs","loading","setLoading","error","setError","copied","setCopied","limitExceeded","setLimitExceeded","prevResults","setPrevResults","fetchRandomGifs","response","fetch","data","json","status","gifData","map","gif","id","images","console","searchGifs","trim","encodeURIComponent","handleInputChange","event","target","value","copyToClipboard","url","navigator","clipboard","writeText","then","setTimeout","catch","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","autoPlay","loop","muted","src","fixed_width","mp4","_c","$RefreshReg$"],"sources":["/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, ChangeEvent } from \"react\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width: {\n      mp4: string;\n    };\n  };\n}\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<boolean>(false);\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [prevResults, setPrevResults] = useState<Gif[]>([]);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setPrevResults(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  const searchGifs = async () => {\n    if (query.trim() === \"\") {\n      return;\n    }\n\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          query\n        )}&limit=10`\n      );\n      const data = await response.json();\n\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const copyToClipboard = (url: string) => {\n    navigator.clipboard\n      .writeText(url)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => {\n          setCopied(false);\n        }, 2000);\n      })\n      .catch((error) => {\n        console.error(\"Error copying GIF URL to clipboard:\", error);\n      });\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={query} onChange={handleInputChange} />\n      <button onClick={searchGifs}>Search</button>\n\n      {loading && <p>Loading...</p>}\n      {error && (\n        <p>Error occurred while searching GIFs. Please try again later.</p>\n      )}\n      {limitExceeded && <p>API limit reached. Please try again later.</p>}\n\n      {prevResults.length > 0 && (\n        <div>\n          <h3>Previous Results</h3>\n          <div>\n            {prevResults.map((gif) => (\n              <video key={gif.id} autoPlay loop muted>\n                <source src={gif.images.fixed_width.mp4} type=\"video/mp4\" />\n              </video>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {gifs.length > 0 ? (\n        <div>\n          <h3>Search Results</h3>\n          <div>\n            {gifs.map((gif) => (\n              <div key={gif.id}>\n                <video autoPlay loop muted>\n                  <source src={gif.images.fixed_width.mp4} type=\"video/mp4\" />\n                </video>\n                <button\n                  onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}\n                >\n                  Copy GIF\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        !loading && !error && (\n          <p>No results found for this name.</p>\n        )\n      )}\n\n      {copied && <p>GIF copied to clipboard!</p>}\n    </div>\n  );\n};\n\nexport default GifPicker;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}