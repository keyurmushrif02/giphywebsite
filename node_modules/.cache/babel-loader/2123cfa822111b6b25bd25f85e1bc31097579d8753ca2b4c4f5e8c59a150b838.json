{"ast":null,"code":"var _jsxFileName = \"/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\nconst LazyGifPicker = /*#__PURE__*/lazy(_c = () => import(\"./GifPicker\"));\n_c2 = LazyGifPicker;\nconst App = () => {\n  _s();\n  const [showPicker, setShowPicker] = useState(false);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowPicker(true);\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showPicker ? /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(LazyGifPicker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"yEMfxdfqhAU4CwqbRlcU72Mw2C4=\");\n_c3 = App;\nconst GifPicker = () => {\n  _s2();\n  const [query, setQuery] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [copied, setCopied] = useState(\"\");\n  const [limitExceeded, setLimitExceeded] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`);\n        const data = await response.json();\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map(gif => ({\n            id: gif.id,\n            images: gif.images\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n    fetchRandomGifs();\n  }, []);\n  const handleInputChange = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(value)}&limit=5`);\n        const data = await response.json();\n        if (response.status === 200) {\n          const suggestionsData = data.data.map(suggestion => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n  const handleSuggestionClick = async (event, suggestion) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n  const searchGifs = async searchQuery => {\n    setSuggestions([]); // Clear suggestions\n\n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    try {\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(queryValue)}&limit=10&format=mp4` // Specify format=mp4\n      );\n\n      const data = await response.json();\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map(gif => ({\n          id: gif.id,\n          images: gif.images\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n    setLoading(false);\n  };\n  const copyToClipboard = url => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 1500);\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      searchGifs();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginBottom: \"16px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Search for GIFs\",\n        value: query,\n        onChange: handleInputChange,\n        variant: \"outlined\",\n        fullWidth: true,\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => searchGifs(),\n        style: {\n          marginLeft: \"8px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        position: \"relative\"\n      },\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        onClick: event => handleSuggestionClick(event, suggestion),\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          cursor: \"pointer\",\n          padding: \"8px\",\n          fontWeight: \"bold\"\n        },\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }, this), limitExceeded && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"API limit exceeded. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"Error fetching GIFs.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: gifs.length > 0 ? gifs.map(gif => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            autoPlay: true,\n            loop: true,\n            src: gif.images.fixed_width.mp4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => copyToClipboard(gif.images.fixed_width.mp4),\n            children: copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this)\n      }, gif.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: \"No GIFs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s2(GifPicker, \"jr/L6rTrhCtH8Kzg34c4P9pVr7Y=\");\n_c4 = GifPicker;\nexport default GifPicker;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"LazyGifPicker$lazy\");\n$RefreshReg$(_c2, \"LazyGifPicker\");\n$RefreshReg$(_c3, \"App\");\n$RefreshReg$(_c4, \"GifPicker\");","map":{"version":3,"names":["React","useState","useEffect","lazy","Suspense","Button","TextField","CircularProgress","Typography","Paper","Grid","Search","jsxDEV","_jsxDEV","API_KEY","LazyGifPicker","_c","_c2","App","_s","showPicker","setShowPicker","timer","setTimeout","clearTimeout","children","fallback","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","justifyContent","height","_c3","GifPicker","_s2","query","setQuery","gifs","setGifs","loading","setLoading","error","setError","copied","setCopied","limitExceeded","setLimitExceeded","suggestions","setSuggestions","fetchRandomGifs","response","fetch","data","json","status","gifData","map","gif","id","images","console","handleInputChange","event","value","target","trim","encodeURIComponent","suggestionsData","suggestion","name","handleSuggestionClick","preventDefault","searchGifs","searchQuery","queryValue","copyToClipboard","url","navigator","clipboard","writeText","handleKeyPress","key","marginBottom","label","onChange","variant","fullWidth","onKeyPress","color","onClick","marginLeft","length","position","cursor","padding","fontWeight","container","spacing","item","xs","autoPlay","loop","src","fixed_width","mp4","_c4","$RefreshReg$"],"sources":["/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, ChangeEvent, KeyboardEvent, lazy, Suspense } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width: {\n      mp4: string;\n    };\n  };\n}\n\nconst LazyGifPicker: React.FC = lazy(() => import(\"./GifPicker\"));\n\nconst App: React.FC = () => {\n  const [showPicker, setShowPicker] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowPicker(true);\n    }, 1500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div>\n      {showPicker ? (\n        <Suspense fallback={<CircularProgress />}>\n          <LazyGifPicker />\n        </Suspense>\n      ) : (\n        <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", height: \"100vh\" }}>\n          <CircularProgress />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<string>(\"\");\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n            value\n          )}&limit=5`\n        );\n        const data = await response.json();\n\n        if (response.status === 200) {\n          const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n\n  const handleSuggestionClick = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, suggestion: string) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n\n  const searchGifs = async (searchQuery?: string) => {\n    setSuggestions([]); // Clear suggestions\n\n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          queryValue\n        )}&limit=10&format=mp4` // Specify format=mp4\n      );\n      const data = await response.json();\n\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  const copyToClipboard = (url: string) => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 1500);\n  };\n\n  const handleKeyPress = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      searchGifs();\n    }\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"16px\" }}>\n        {/* <Typography variant=\"h4\">GIF Picker</Typography> */}\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <TextField\n          label=\"Search for GIFs\"\n          value={query}\n          onChange={handleInputChange}\n          variant=\"outlined\"\n          fullWidth\n          onKeyPress={handleKeyPress}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => searchGifs()} style={{ marginLeft: \"8px\" }}>\n          <Search />\n        </Button>\n      </div>\n      {suggestions.length > 0 && (\n        <Paper style={{ position: \"relative\" }}>\n          {suggestions.map((suggestion) => (\n            <Typography\n              key={suggestion}\n              variant=\"body2\"\n              onClick={(event) => handleSuggestionClick(event as any, suggestion)}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n                padding: \"8px\",\n                fontWeight: \"bold\"\n              }}\n            >\n              {suggestion}\n            </Typography>\n          ))}\n        </Paper>\n      )}\n      {loading && <CircularProgress />}\n      {limitExceeded && (\n        <Typography color=\"error\">\n          API limit exceeded. Please try again later.\n        </Typography>\n      )}\n      {error && <Typography color=\"error\">Error fetching GIFs.</Typography>}\n      <Grid container spacing={2}>\n        {gifs.length > 0 ? (\n          gifs.map((gif) => (\n            <Grid item xs={4} key={gif.id}>\n              <div>\n                <video autoPlay loop src={gif.images.fixed_width.mp4}></video>\n                <Button onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}>\n                  {copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"}\n                </Button>\n              </div>\n            </Grid>\n          ))\n        ) : (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\">No GIFs found.</Typography>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default GifPicker;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAA8BC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AAC9F,SAASC,MAAM,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,KAAK,EAAEC,IAAI,QAAQ,mBAAmB;AAChG,SAASC,MAAM,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAG,kCAAkC;AAWlD,MAAMC,aAAuB,gBAAGZ,IAAI,CAAAa,EAAA,GAACA,CAAA,KAAM,MAAM,CAAC,aAAa,CAAC,CAAC;AAACC,GAAA,GAA5DF,aAAuB;AAE7B,MAAMG,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMoB,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BF,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMG,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAY,QAAA,EACGL,UAAU,gBACTP,OAAA,CAACT,QAAQ;MAACsB,QAAQ,eAAEb,OAAA,CAACN,gBAAgB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAL,QAAA,eACvCZ,OAAA,CAACE,aAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,gBAEXjB,OAAA;MAAKkB,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAV,QAAA,eAC/FZ,OAAA,CAACN,gBAAgB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CAxBID,GAAa;AAAAkB,GAAA,GAAblB,GAAa;AA0BnB,MAAMmB,SAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGvC,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACwC,IAAI,EAAEC,OAAO,CAAC,GAAGzC,QAAQ,CAAQ,EAAE,CAAC;EAC3C,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAAC4C,KAAK,EAAEC,QAAQ,CAAC,GAAG7C,QAAQ,CAAU,KAAK,CAAC;EAClD,MAAM,CAAC8C,MAAM,EAAEC,SAAS,CAAC,GAAG/C,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAACgD,aAAa,EAAEC,gBAAgB,CAAC,GAAGjD,QAAQ,CAAU,KAAK,CAAC;EAClE,MAAM,CAACkD,WAAW,EAAEC,cAAc,CAAC,GAAGnD,QAAQ,CAAW,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACd,MAAMmD,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,kDAAiDzC,OAAQ,UAC5D,CAAC;QACD,MAAM0C,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAC3BR,gBAAgB,CAAC,IAAI,CAAC;QACxB,CAAC,MAAM;UACL,MAAMS,OAAO,GAAGH,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,GAAQ,KAAM;YAC3CC,EAAE,EAAED,GAAG,CAACC,EAAE;YACVC,MAAM,EAAEF,GAAG,CAACE;UACd,CAAC,CAAC,CAAC;UACHrB,OAAO,CAACiB,OAAO,CAAC;QAClB;MACF,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdmB,OAAO,CAACnB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDQ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,iBAAiB,GAAG,MAAOC,KAAoC,IAAK;IACxE,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC3B,QAAQ,CAAC2B,KAAK,CAAC;IAEf,IAAI;MACF,IAAIA,KAAK,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACvB,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CACzB,qDAAoDzC,OAAQ,MAAKwD,kBAAkB,CAClFH,KACF,CAAE,UACJ,CAAC;QACD,MAAMX,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAC3B,MAAMa,eAAe,GAAGf,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEY,UAAe,IAAKA,UAAU,CAACC,IAAI,CAAC;UAC3ErB,cAAc,CAACmB,eAAe,CAAC;QACjC;MACF,CAAC,MAAM;QACLnB,cAAc,CAAC,EAAE,CAAC;MACpB;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED,MAAM6B,qBAAqB,GAAG,MAAAA,CAAOR,KAAmD,EAAEM,UAAkB,KAAK;IAC/GN,KAAK,CAACS,cAAc,CAAC,CAAC;IACtBnC,QAAQ,CAACgC,UAAU,CAAC;IACpB,MAAMI,UAAU,CAACJ,UAAU,CAAC;EAC9B,CAAC;EAED,MAAMI,UAAU,GAAG,MAAOC,WAAoB,IAAK;IACjDzB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEpB,MAAM0B,UAAU,GAAGD,WAAW,IAAItC,KAAK;IACvC,IAAIuC,UAAU,CAACT,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5B;IACF;IAEAzB,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,KAAK,CAAC;IACfJ,OAAO,CAAC,EAAE,CAAC;IAEX,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CACzB,gDAA+CzC,OAAQ,MAAKwD,kBAAkB,CAC7EQ,UACF,CAAE,sBAAqB,CAAC;MAC1B,CAAC;;MACD,MAAMtB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3BR,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACL,MAAMS,OAAO,GAAGH,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,GAAQ,KAAM;UAC3CC,EAAE,EAAED,GAAG,CAACC,EAAE;UACVC,MAAM,EAAEF,GAAG,CAACE;QACd,CAAC,CAAC,CAAC;QACHrB,OAAO,CAACiB,OAAO,CAAC;QAChBT,gBAAgB,CAAC,KAAK,CAAC;MACzB;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,IAAI,CAAC;IAChB;IAEAF,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMmC,eAAe,GAAIC,GAAW,IAAK;IACvCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,GAAG,CAAC;IAClChC,SAAS,CAACgC,GAAG,CAAC;IACdzD,UAAU,CAAC,MAAM;MACfyB,SAAS,CAAC,EAAE,CAAC;IACf,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMoC,cAAc,GAAIlB,KAAoB,IAAK;IAC/C,IAAIA,KAAK,CAACmB,GAAG,KAAK,OAAO,EAAE;MACzBT,UAAU,CAAC,CAAC;IACd;EACF,CAAC;EAED,oBACE/D,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAKkB,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE,QAAQ;QAAEoD,YAAY,EAAE;MAAO;IAAE;MAAA3D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEjG,CAAC,eACNjB,OAAA;MAAKkB,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAAR,QAAA,gBACpDZ,OAAA,CAACP,SAAS;QACRiF,KAAK,EAAC,iBAAiB;QACvBpB,KAAK,EAAE5B,KAAM;QACbiD,QAAQ,EAAEvB,iBAAkB;QAC5BwB,OAAO,EAAC,UAAU;QAClBC,SAAS;QACTC,UAAU,EAAEP;MAAe;QAAAzD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFjB,OAAA,CAACR,MAAM;QAACoF,OAAO,EAAC,WAAW;QAACG,KAAK,EAAC,SAAS;QAACC,OAAO,EAAEA,CAAA,KAAMjB,UAAU,CAAC,CAAE;QAAC7C,KAAK,EAAE;UAAE+D,UAAU,EAAE;QAAM,CAAE;QAAArE,QAAA,eACpGZ,OAAA,CAACF,MAAM;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACLqB,WAAW,CAAC4C,MAAM,GAAG,CAAC,iBACrBlF,OAAA,CAACJ,KAAK;MAACsB,KAAK,EAAE;QAAEiE,QAAQ,EAAE;MAAW,CAAE;MAAAvE,QAAA,EACpC0B,WAAW,CAACS,GAAG,CAAEY,UAAU,iBAC1B3D,OAAA,CAACL,UAAU;QAETiF,OAAO,EAAC,OAAO;QACfI,OAAO,EAAG3B,KAAK,IAAKQ,qBAAqB,CAACR,KAAK,EAASM,UAAU,CAAE;QACpEzC,KAAK,EAAE;UACLC,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE,QAAQ;UACpBgE,MAAM,EAAE,SAAS;UACjBC,OAAO,EAAE,KAAK;UACdC,UAAU,EAAE;QACd,CAAE;QAAA1E,QAAA,EAED+C;MAAU,GAXNA,UAAU;QAAA7C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYL,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CACR,EACAa,OAAO,iBAAI9B,OAAA,CAACN,gBAAgB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/BmB,aAAa,iBACZpC,OAAA,CAACL,UAAU;MAACoF,KAAK,EAAC,OAAO;MAAAnE,QAAA,EAAC;IAE1B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CACb,EACAe,KAAK,iBAAIhC,OAAA,CAACL,UAAU;MAACoF,KAAK,EAAC,OAAO;MAAAnE,QAAA,EAAC;IAAoB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACrEjB,OAAA,CAACH,IAAI;MAAC0F,SAAS;MAACC,OAAO,EAAE,CAAE;MAAA5E,QAAA,EACxBgB,IAAI,CAACsD,MAAM,GAAG,CAAC,GACdtD,IAAI,CAACmB,GAAG,CAAEC,GAAG,iBACXhD,OAAA,CAACH,IAAI;QAAC4F,IAAI;QAACC,EAAE,EAAE,CAAE;QAAA9E,QAAA,eACfZ,OAAA;UAAAY,QAAA,gBACEZ,OAAA;YAAO2F,QAAQ;YAACC,IAAI;YAACC,GAAG,EAAE7C,GAAG,CAACE,MAAM,CAAC4C,WAAW,CAACC;UAAI;YAAAjF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9DjB,OAAA,CAACR,MAAM;YAACwF,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAAClB,GAAG,CAACE,MAAM,CAAC4C,WAAW,CAACC,GAAG,CAAE;YAAAnF,QAAA,EAChEsB,MAAM,KAAKc,GAAG,CAACE,MAAM,CAAC4C,WAAW,CAACC,GAAG,GAAG,SAAS,GAAG;UAAmB;YAAAjF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC,GANe+B,GAAG,CAACC,EAAE;QAAAnC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOvB,CACP,CAAC,gBAEFjB,OAAA,CAACH,IAAI;QAAC4F,IAAI;QAACC,EAAE,EAAE,EAAG;QAAA9E,QAAA,eAChBZ,OAAA,CAACL,UAAU;UAACiF,OAAO,EAAC,OAAO;UAAAhE,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IACP;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACQ,GAAA,CAtLID,SAAmB;AAAAwE,GAAA,GAAnBxE,SAAmB;AAwLzB,eAAeA,SAAS;AAAC,IAAArB,EAAA,EAAAC,GAAA,EAAAmB,GAAA,EAAAyE,GAAA;AAAAC,YAAA,CAAA9F,EAAA;AAAA8F,YAAA,CAAA7F,GAAA;AAAA6F,YAAA,CAAA1E,GAAA;AAAA0E,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}