{"ast":null,"code":"var _jsxFileName = \"/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\nconst GifPicker = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [limitExceeded, setLimitExceeded] = useState(false);\n  const [prevResults, setPrevResults] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`);\n        const data = await response.json();\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map(gif => ({\n            id: gif.id,\n            images: gif.images\n          }));\n          setPrevResults(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n    fetchRandomGifs();\n  }, []);\n  const handleInputChange = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(value)}&limit=5`);\n        const data = await response.json();\n        if (response.status === 200) {\n          const suggestionsData = data.data.map(suggestion => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n  const searchGifs = async () => {\n    setSuggestions([]); // Clear suggestions\n\n    if (query.trim() === \"\") {\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    try {\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(query)}&limit=10`);\n      const data = await response.json();\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map(gif => ({\n          id: gif.id,\n          images: gif.images\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n    setLoading(false);\n  };\n  const copyToClipboard = url => {\n    navigator.clipboard.writeText(url);\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 1500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Search for GIFs\",\n      value: query,\n      onChange: handleInputChange,\n      variant: \"outlined\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        onClick: () => setQuery(suggestion),\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: searchGifs,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }, this), limitExceeded && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"API limit exceeded. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"Error fetching GIFs.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), gifs.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        src: gif.images.fixed_width.mp4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => copyToClipboard(gif.images.fixed_width.mp4),\n        children: copied ? \"Copied!\" : \"Copy to Clipboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, gif.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)), prevResults.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        src: gif.images.fixed_width.mp4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => copyToClipboard(gif.images.fixed_width.mp4),\n        children: copied ? \"Copied!\" : \"Copy to Clipboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, gif.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(GifPicker, \"2cOEXIFOWCu0qVpGKCaUogPKNOQ=\");\n_c = GifPicker;\nexport default GifPicker;\nvar _c;\n$RefreshReg$(_c, \"GifPicker\");","map":{"version":3,"names":["React","useState","useEffect","Button","TextField","CircularProgress","Typography","Paper","jsxDEV","_jsxDEV","API_KEY","GifPicker","_s","query","setQuery","gifs","setGifs","loading","setLoading","error","setError","copied","setCopied","limitExceeded","setLimitExceeded","prevResults","setPrevResults","suggestions","setSuggestions","fetchRandomGifs","response","fetch","data","json","status","gifData","map","gif","id","images","console","handleInputChange","event","value","target","trim","encodeURIComponent","suggestionsData","suggestion","name","searchGifs","copyToClipboard","url","navigator","clipboard","writeText","setTimeout","children","label","onChange","variant","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","color","autoPlay","loop","src","fixed_width","mp4","_c","$RefreshReg$"],"sources":["/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper } from \"@material-ui/core\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width: {\n      mp4: string;\n    };\n  };\n}\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<boolean>(false);\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [prevResults, setPrevResults] = useState<Gif[]>([]);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setPrevResults(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n            value\n          )}&limit=5`\n        );\n        const data = await response.json();\n\n        if (response.status === 200) {\n          const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n\n  const searchGifs = async () => {\n    setSuggestions([]); // Clear suggestions\n\n    if (query.trim() === \"\") {\n      return;\n    }\n\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          query\n        )}&limit=10`\n      );\n      const data = await response.json();\n\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n        setLimitExceeded(false);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  const copyToClipboard = (url: string) => {\n    navigator.clipboard.writeText(url);\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 1500);\n  };\n\n  return (\n    <div>\n      <TextField\n        label=\"Search for GIFs\"\n        value={query}\n        onChange={handleInputChange}\n        variant=\"outlined\"\n        fullWidth\n      />\n      {suggestions.length > 0 && (\n        <Paper>\n          {suggestions.map((suggestion) => (\n            <Typography\n              key={suggestion}\n              variant=\"body2\"\n              onClick={() => setQuery(suggestion)}\n            >\n              {suggestion}\n            </Typography>\n          ))}\n        </Paper>\n      )}\n      <Button variant=\"contained\" color=\"primary\" onClick={searchGifs}>\n        Search\n      </Button>\n\n      {loading && <CircularProgress />}\n      {limitExceeded && (\n        <Typography color=\"error\">\n          API limit exceeded. Please try again later.\n        </Typography>\n      )}\n      {error && <Typography color=\"error\">Error fetching GIFs.</Typography>}\n\n      {gifs.map((gif) => (\n        <div key={gif.id}>\n          <video autoPlay loop src={gif.images.fixed_width.mp4}></video>\n          <Button onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}>\n            {copied ? \"Copied!\" : \"Copy to Clipboard\"}\n          </Button>\n        </div>\n      ))}\n\n      {prevResults.map((gif) => (\n        <div key={gif.id}>\n          <video autoPlay loop src={gif.images.fixed_width.mp4}></video>\n          <Button onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}>\n            {copied ? \"Copied!\" : \"Copy to Clipboard\"}\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GifPicker;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}