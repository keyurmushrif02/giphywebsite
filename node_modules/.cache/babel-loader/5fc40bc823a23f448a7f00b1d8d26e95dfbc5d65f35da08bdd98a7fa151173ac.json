{"ast":null,"code":"var _jsxFileName = \"/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, ChangeEvent, KeyboardEvent } from \"react\";\n// import { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\n// import { Search } from \"@material-ui/icons\";\n\n// const API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\n// interface Gif {\n//   id: string;\n//   images: {\n//     fixed_width: {\n//       mp4: string;\n//     };\n//   };\n// }\n\n// const GifPicker: React.FC = () => {\n//   const [query, setQuery] = useState<string>(\"\");\n//   const [gifs, setGifs] = useState<Gif[]>([]);\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [error, setError] = useState<boolean>(false);\n//   const [copied, setCopied] = useState<string>(\"\");\n//   const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n//   const [suggestions, setSuggestions] = useState<string[]>([]);\n\n//   useEffect(() => {\n//     const fetchRandomGifs = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n//         );\n//         const data = await response.json();\n\n//         if (response.status === 429) {\n//           setLimitExceeded(true);\n//         } else {\n//           const gifData = data.data.map((gif: any) => ({\n//             id: gif.id,\n//             images: gif.images,\n//           }));\n//           setGifs(gifData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching random GIFs:\", error);\n//       }\n//     };\n\n//     fetchRandomGifs();\n//   }, []);\n\n//   const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n//     const value = event.target.value;\n//     setQuery(value);\n\n//     try {\n//       if (value.trim() !== \"\") {\n//         const response = await fetch(\n//           `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n//             value\n//           )}&limit=5`\n//         );\n//         const data = await response.json();\n\n//         if (response.status === 200) {\n//           const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n//           setSuggestions(suggestionsData);\n//         }\n//       } else {\n//         setSuggestions([]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching search suggestions:\", error);\n//     }\n//   };\n\n//   const handleSuggestionClick = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, suggestion: string) => {\n//     event.preventDefault();\n//     setQuery(suggestion);\n//     await searchGifs(suggestion);\n//   };\n\n//   const searchGifs = async (searchQuery?: string) => {\n//     setSuggestions([]); // Clear suggestions\n\n//     const queryValue = searchQuery || query;\n//     if (queryValue.trim() === \"\") {\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(false);\n//     setGifs([]);\n\n//     try {\n//       const response = await fetch(\n//         `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n//           queryValue\n//         )}&limit=10`\n//       );\n//       const data = await response.json();\n\n//       if (response.status === 429) {\n//         setLimitExceeded(true);\n//       } else {\n//         const gifData = data.data.map((gif: any) => ({\n//           id: gif.id,\n//           images: gif.images,\n//         }));\n//         setGifs(gifData);\n//         setLimitExceeded(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error searching GIFs:\", error);\n//       setError(true);\n//     }\n\n//     setLoading(false);\n//   };\n\n//   const copyToClipboard = (url: string) => {\n//     navigator.clipboard.writeText(url);\n//     setCopied(url);\n//     setTimeout(() => {\n//       setCopied(\"\");\n//     }, 1500);\n//   };\n\n//   const handleKeyPress = (event: KeyboardEvent) => {\n//     if (event.key === \"Enter\") {\n//       searchGifs();\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"16px\" }}>\n//         {/* <Typography variant=\"h4\">GIF Picker</Typography> */}\n//       </div>\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//         <TextField\n//           label=\"Search for GIFs\"\n//           value={query}\n//           onChange={handleInputChange}\n//           variant=\"outlined\"\n//           fullWidth\n//           onKeyPress={handleKeyPress}\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={() => searchGifs()} style={{ marginLeft: \"8px\" }}>\n//   <Search />\n// </Button>\n\n//       </div>\n//       {suggestions.length > 0 && (\n//         <Paper style={{ position: \"relative\" }}>\n//           {suggestions.map((suggestion) => (\n//            <Typography\n//            key={suggestion}\n//            variant=\"body2\"\n//            onClick={(event) => handleSuggestionClick(event as any, suggestion)}\n//            style={{\n//              display: \"flex\",\n//              alignItems: \"center\",\n//              cursor: \"pointer\",\n//              padding: \"8px\",\n//              fontWeight: \"bold\"\n//            }}\n//          >\n//            {suggestion}\n//          </Typography>\n\n//           ))}\n//         </Paper>\n//       )}\n\n//       {loading && <CircularProgress />}\n//       {limitExceeded && (\n//         <Typography color=\"error\">\n//           API limit exceeded. Please try again later.\n//         </Typography>\n//       )}\n//       {error && <Typography color=\"error\">Error fetching GIFs.</Typography>}\n\n//       <Grid container spacing={2}>\n//         {gifs.length > 0 ? (\n//           gifs.map((gif) => (\n//             <Grid item xs={4} key={gif.id}>\n//               <div>\n//                 <video autoPlay loop src={gif.images.fixed_width.mp4}></video>\n//                 <Button onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}>\n//                   {copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"}\n//                 </Button>\n//               </div>\n//             </Grid>\n//           ))\n//         ) : (\n//           <Grid item xs={12}>\n//             <Typography variant=\"body2\">No GIFs found.</Typography>\n//           </Grid>\n//         )}\n//       </Grid>\n//     </div>\n//   );\n// };\n\n// export default GifPicker;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\"; // Replace with your actual Giphy API key\n\nconst GifPicker = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [copied, setCopied] = useState(\"\");\n  const [limitExceeded, setLimitExceeded] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3&format=mp4`);\n        const data = await response.json();\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map(gif => ({\n            id: gif.id,\n            images: gif.images\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n    fetchRandomGifs();\n  }, []);\n  const handleInputChange = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(value)}&limit=5`);\n        const data = await response.json();\n        if (response.status === 200) {\n          const suggestionsData = data.data.map(suggestion => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n  const handleSuggestionClick = async (event, suggestion) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n  const searchGifs = async searchQuery => {\n    setSuggestions([]); // Clear suggestions\n\n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    try {\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(queryValue)}&limit=10&format=mp4` // Specify format=mp4\n      );\n\n      const data = await response.json();\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map(gif => ({\n          id: gif.id,\n          images: gif.images\n        }));\n        setGifs(gifData);\n      }\n    } catch (error) {\n      console.error(\"Error fetching GIFs:\", error);\n      setError(true);\n    }\n    setLoading(false);\n  };\n  const handleSearch = async () => {\n    await searchGifs();\n  };\n  const handleKeyPress = async event => {\n    if (event.key === \"Enter\") {\n      await searchGifs();\n    }\n  };\n  const handleCopy = url => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          style: {\n            padding: \"16px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Search GIFs\",\n            value: query,\n            onChange: handleInputChange,\n            onKeyPress: handleKeyPress,\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleSearch,\n                disabled: loading || query.trim() === \"\",\n                children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 2,\n            style: {\n              marginTop: \"16px\",\n              padding: \"8px\"\n            },\n            children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              component: \"div\",\n              style: {\n                cursor: \"pointer\",\n                marginBottom: \"8px\"\n              },\n              onClick: event => handleSuggestionClick(event, suggestion),\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), limitExceeded && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      component: \"div\",\n      style: {\n        color: \"red\",\n        marginTop: \"16px\"\n      },\n      children: \"API limit exceeded. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        marginTop: \"16px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this) : gifs.length > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: \"16px\"\n      },\n      children: gifs.map(gif => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          style: {\n            padding: \"16px\",\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            src: gif.images.fixed_width_mp4.mp4,\n            autoPlay: true,\n            loop: true,\n            muted: true,\n            style: {\n              maxWidth: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleCopy(gif.images.fixed_width_mp4.mp4),\n            style: {\n              marginTop: \"16px\"\n            },\n            children: copied === gif.images.fixed_width_mp4.mp4 ? \"Copied!\" : \"Copy URL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 17\n        }, this)\n      }, gif.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 11\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      component: \"div\",\n      style: {\n        color: \"red\",\n        marginTop: \"16px\"\n      },\n      children: \"Error occurred while fetching GIFs. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n};\n_s(GifPicker, \"jr/L6rTrhCtH8Kzg34c4P9pVr7Y=\");\n_c = GifPicker;\nexport default GifPicker;\nvar _c;\n$RefreshReg$(_c, \"GifPicker\");","map":{"version":3,"names":["React","useState","useEffect","Button","TextField","CircularProgress","Typography","Paper","Grid","Search","jsxDEV","_jsxDEV","API_KEY","GifPicker","_s","query","setQuery","gifs","setGifs","loading","setLoading","error","setError","copied","setCopied","limitExceeded","setLimitExceeded","suggestions","setSuggestions","fetchRandomGifs","response","fetch","data","json","status","gifData","map","gif","id","images","console","handleInputChange","event","value","target","trim","encodeURIComponent","suggestionsData","suggestion","name","handleSuggestionClick","preventDefault","searchGifs","searchQuery","queryValue","handleSearch","handleKeyPress","key","handleCopy","url","navigator","clipboard","writeText","setTimeout","children","container","spacing","justify","item","xs","sm","elevation","style","padding","fullWidth","label","onChange","onKeyPress","InputProps","endAdornment","variant","color","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","length","marginTop","component","cursor","marginBottom","display","alignItems","src","fixed_width_mp4","mp4","autoPlay","loop","muted","maxWidth","_c","$RefreshReg$"],"sources":["/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx"],"sourcesContent":["// import React, { useState, useEffect, ChangeEvent, KeyboardEvent } from \"react\";\n// import { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\n// import { Search } from \"@material-ui/icons\";\n\n// const API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\n// interface Gif {\n//   id: string;\n//   images: {\n//     fixed_width: {\n//       mp4: string;\n//     };\n//   };\n// }\n\n// const GifPicker: React.FC = () => {\n//   const [query, setQuery] = useState<string>(\"\");\n//   const [gifs, setGifs] = useState<Gif[]>([]);\n//   const [loading, setLoading] = useState<boolean>(false);\n//   const [error, setError] = useState<boolean>(false);\n//   const [copied, setCopied] = useState<string>(\"\");\n//   const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n//   const [suggestions, setSuggestions] = useState<string[]>([]);\n\n//   useEffect(() => {\n//     const fetchRandomGifs = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n//         );\n//         const data = await response.json();\n\n//         if (response.status === 429) {\n//           setLimitExceeded(true);\n//         } else {\n//           const gifData = data.data.map((gif: any) => ({\n//             id: gif.id,\n//             images: gif.images,\n//           }));\n//           setGifs(gifData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching random GIFs:\", error);\n//       }\n//     };\n\n//     fetchRandomGifs();\n//   }, []);\n\n//   const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n//     const value = event.target.value;\n//     setQuery(value);\n\n//     try {\n//       if (value.trim() !== \"\") {\n//         const response = await fetch(\n//           `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n//             value\n//           )}&limit=5`\n//         );\n//         const data = await response.json();\n\n//         if (response.status === 200) {\n//           const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n//           setSuggestions(suggestionsData);\n//         }\n//       } else {\n//         setSuggestions([]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching search suggestions:\", error);\n//     }\n//   };\n\n//   const handleSuggestionClick = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, suggestion: string) => {\n//     event.preventDefault();\n//     setQuery(suggestion);\n//     await searchGifs(suggestion);\n//   };\n\n//   const searchGifs = async (searchQuery?: string) => {\n//     setSuggestions([]); // Clear suggestions\n\n//     const queryValue = searchQuery || query;\n//     if (queryValue.trim() === \"\") {\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(false);\n//     setGifs([]);\n\n//     try {\n//       const response = await fetch(\n//         `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n//           queryValue\n//         )}&limit=10`\n//       );\n//       const data = await response.json();\n\n//       if (response.status === 429) {\n//         setLimitExceeded(true);\n//       } else {\n//         const gifData = data.data.map((gif: any) => ({\n//           id: gif.id,\n//           images: gif.images,\n//         }));\n//         setGifs(gifData);\n//         setLimitExceeded(false);\n//       }\n//     } catch (error) {\n//       console.error(\"Error searching GIFs:\", error);\n//       setError(true);\n//     }\n\n//     setLoading(false);\n//   };\n\n//   const copyToClipboard = (url: string) => {\n//     navigator.clipboard.writeText(url);\n//     setCopied(url);\n//     setTimeout(() => {\n//       setCopied(\"\");\n//     }, 1500);\n//   };\n\n//   const handleKeyPress = (event: KeyboardEvent) => {\n//     if (event.key === \"Enter\") {\n//       searchGifs();\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginBottom: \"16px\" }}>\n//         {/* <Typography variant=\"h4\">GIF Picker</Typography> */}\n//       </div>\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//         <TextField\n//           label=\"Search for GIFs\"\n//           value={query}\n//           onChange={handleInputChange}\n//           variant=\"outlined\"\n//           fullWidth\n//           onKeyPress={handleKeyPress}\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={() => searchGifs()} style={{ marginLeft: \"8px\" }}>\n//   <Search />\n// </Button>\n\n//       </div>\n//       {suggestions.length > 0 && (\n//         <Paper style={{ position: \"relative\" }}>\n//           {suggestions.map((suggestion) => (\n//            <Typography\n//            key={suggestion}\n//            variant=\"body2\"\n//            onClick={(event) => handleSuggestionClick(event as any, suggestion)}\n//            style={{\n//              display: \"flex\",\n//              alignItems: \"center\",\n//              cursor: \"pointer\",\n//              padding: \"8px\",\n//              fontWeight: \"bold\"\n//            }}\n//          >\n//            {suggestion}\n//          </Typography>\n         \n//           ))}\n//         </Paper>\n//       )}\n\n//       {loading && <CircularProgress />}\n//       {limitExceeded && (\n//         <Typography color=\"error\">\n//           API limit exceeded. Please try again later.\n//         </Typography>\n//       )}\n//       {error && <Typography color=\"error\">Error fetching GIFs.</Typography>}\n\n//       <Grid container spacing={2}>\n//         {gifs.length > 0 ? (\n//           gifs.map((gif) => (\n//             <Grid item xs={4} key={gif.id}>\n//               <div>\n//                 <video autoPlay loop src={gif.images.fixed_width.mp4}></video>\n//                 <Button onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}>\n//                   {copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"}\n//                 </Button>\n//               </div>\n//             </Grid>\n//           ))\n//         ) : (\n//           <Grid item xs={12}>\n//             <Typography variant=\"body2\">No GIFs found.</Typography>\n//           </Grid>\n//         )}\n//       </Grid>\n//     </div>\n//   );\n// };\n\n// export default GifPicker;\n\nimport React, { useState, useEffect, ChangeEvent, KeyboardEvent } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\"; // Replace with your actual Giphy API key\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width_mp4: {\n      mp4: string;\n    };\n  };\n}\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<string>(\"\");\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3&format=mp4`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n            value\n          )}&limit=5`\n        );\n        const data = await response.json();\n\n        if (response.status === 200) {\n          const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n\n  const handleSuggestionClick = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, suggestion: string) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n\n  const searchGifs = async (searchQuery?: string) => {\n    setSuggestions([]); // Clear suggestions\n\n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          queryValue\n        )}&limit=10&format=mp4` // Specify format=mp4\n      );\n      const data = await response.json();\n\n      if (response.status === 429) {\n        setLimitExceeded(true);\n      } else {\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n      }\n    } catch (error) {\n      console.error(\"Error fetching GIFs:\", error);\n      setError(true);\n    }\n\n    setLoading(false);\n  };\n\n  const handleSearch = async () => {\n    await searchGifs();\n  };\n\n  const handleKeyPress = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      await searchGifs();\n    }\n  };\n\n  const handleCopy = (url: string) => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 2000);\n  };\n\n  return (\n    <div>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item xs={12} sm={6}>\n          <Paper elevation={2} style={{ padding: \"16px\" }}>\n            <TextField\n              fullWidth\n              label=\"Search GIFs\"\n              value={query}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              InputProps={{\n                endAdornment: (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSearch}\n                    disabled={loading || query.trim() === \"\"}\n                  >\n                    <Search />\n                  </Button>\n                ),\n              }}\n            />\n            {suggestions.length > 0 && (\n              <Paper elevation={2} style={{ marginTop: \"16px\", padding: \"8px\" }}>\n                {suggestions.map((suggestion) => (\n                  <Typography\n                    key={suggestion}\n                    variant=\"body2\"\n                    component=\"div\"\n                    style={{ cursor: \"pointer\", marginBottom: \"8px\" }}\n                    onClick={(event) => handleSuggestionClick(event, suggestion)}\n                  >\n                    {suggestion}\n                  </Typography>\n                ))}\n              </Paper>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n      {limitExceeded && (\n        <Typography variant=\"body2\" component=\"div\" style={{ color: \"red\", marginTop: \"16px\" }}>\n          API limit exceeded. Please try again later.\n        </Typography>\n      )}\n      {loading ? (\n        <CircularProgress style={{ marginTop: \"16px\" }} />\n      ) : (\n        gifs.length > 0 && (\n          <Grid container spacing={2} style={{ marginTop: \"16px\" }}>\n            {gifs.map((gif) => (\n              <Grid key={gif.id} item xs={12} sm={4}>\n                <Paper elevation={2} style={{ padding: \"16px\", display: \"flex\", alignItems: \"center\" }}>\n                  <video src={gif.images.fixed_width_mp4.mp4} autoPlay loop muted style={{ maxWidth: \"100%\" }} />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleCopy(gif.images.fixed_width_mp4.mp4)}\n                    style={{ marginTop: \"16px\" }}\n                  >\n                    {copied === gif.images.fixed_width_mp4.mp4 ? \"Copied!\" : \"Copy URL\"}\n                  </Button>\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        )\n      )}\n      {error && (\n        <Typography variant=\"body2\" component=\"div\" style={{ color: \"red\", marginTop: \"16px\" }}>\n          Error occurred while fetching GIFs. Please try again later.\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport default GifPicker;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAoC,OAAO;AAC9E,SAASC,MAAM,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,KAAK,EAAEC,IAAI,QAAQ,mBAAmB;AAChG,SAASC,MAAM,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAG,kCAAkC,CAAC,CAAC;;AAWpD,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}