{"ast":null,"code":"var _jsxFileName = \"/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, lazy } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\nconst LazyGifPicker = /*#__PURE__*/lazy(_c = () => import(\"./GifPicker\"));\n_c2 = LazyGifPicker;\nconst GifPicker = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [gifs, setGifs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [copied, setCopied] = useState(\"\");\n  const [limitExceeded, setLimitExceeded] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  const [openAboutDialog, setOpenAboutDialog] = useState(false);\n  const [requestCount, setRequestCount] = useState(0);\n  const [lastRequestTimestamp, setLastRequestTimestamp] = useState(null);\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`);\n        const data = await response.json();\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map(gif => ({\n            id: gif.id,\n            images: gif.images\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n    fetchRandomGifs();\n  }, []);\n  useEffect(() => {\n    const checkApiLimit = () => {\n      const currentTime = Date.now();\n      const timeDiff = currentTime - (lastRequestTimestamp || 0);\n      if (requestCount >= 42 && timeDiff < 3600000) {\n        setLimitExceeded(true); // Set limitExceeded state variable to true\n      } else if (requestCount >= 1000 && timeDiff < 86400000) {\n        setLimitExceeded(true); // Set limitExceeded state variable to true\n      } else {\n        setLimitExceeded(false); // Reset the limitExceeded state variable\n      }\n    };\n\n    checkApiLimit();\n  }, [requestCount, lastRequestTimestamp]);\n  const handleInputChange = async event => {\n    const value = event.target.value;\n    setQuery(value);\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(value)}&limit=5`);\n        const data = await response.json();\n        if (response.status === 200) {\n          const suggestionsData = data.data.map(suggestion => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n  const handleSuggestionClick = async (event, suggestion) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n  const searchGifs = async searchQuery => {\n    setSuggestions([]); // Clear suggestions\n\n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    setLimitExceeded(false); // Reset the limit exceeded state\n\n    try {\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(queryValue)}&limit=10&format=mp4` // Specify format=mp4\n      );\n\n      if (response.status === 429) {\n        setLimitExceeded(true); // Set the limit exceeded state\n      } else {\n        const data = await response.json();\n        const gifData = data.data.map(gif => ({\n          id: gif.id,\n          images: gif.images\n        }));\n        setGifs(gifData);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n    setLoading(false);\n  };\n  const copyToClipboard = url => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 1500);\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      searchGifs();\n    }\n  };\n  const handleAboutClick = () => {\n    setOpenAboutDialog(true);\n  };\n  const handleAboutClose = () => {\n    setOpenAboutDialog(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"0 auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Search for GIFs\",\n        value: query,\n        onChange: handleInputChange,\n        variant: \"outlined\",\n        fullWidth: true,\n        onKeyPress: handleKeyPress,\n        style: {\n          marginRight: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => searchGifs(),\n        children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleAboutClick,\n        style: {\n          marginLeft: 8\n        },\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        position: \"relative\",\n        marginTop: 16\n      },\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        onClick: event => handleSuggestionClick(event, suggestion),\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          cursor: \"pointer\",\n          padding: 8,\n          fontWeight: \"bold\",\n          color: \"white\",\n          backgroundColor: \"#4caf50\",\n          marginBottom: 8,\n          borderRadius: 4\n        },\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      style: {\n        marginTop: 16\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 19\n    }, this), limitExceeded && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      style: {\n        marginTop: 16\n      },\n      children: \"API limit exceeded. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      style: {\n        marginTop: 16\n      },\n      children: \"Error fetching GIFs.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        marginTop: 16\n      },\n      children: gifs.length > 0 ? gifs.map(gif => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            autoPlay: true,\n            loop: true,\n            src: gif.images.fixed_width.mp4,\n            style: {\n              width: \"100%\",\n              marginBottom: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: () => copyToClipboard(gif.images.fixed_width.mp4),\n            style: {\n              width: \"100%\",\n              backgroundColor: \"#2196f3\",\n              color: \"white\",\n              fontWeight: \"bold\"\n            },\n            children: copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this)\n      }, gif.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          style: {\n            color: \"white\",\n            backgroundColor: \"#f44336\",\n            padding: 8,\n            borderRadius: 4\n          },\n          children: \"No GIFs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openAboutDialog,\n      onClose: handleAboutClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"About GIPHY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"GIPHY is an online database and search engine that allows users to search for and share animated GIF files. You can find more information about GIPHY on their website:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://giphy.com/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"https://giphy.com/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAboutClose,\n          color: \"primary\",\n          autoFocus: true,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(GifPicker, \"ji7LozJnVMD1xdTDlURj73o6S1w=\");\n_c3 = GifPicker;\nexport default GifPicker;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LazyGifPicker$lazy\");\n$RefreshReg$(_c2, \"LazyGifPicker\");\n$RefreshReg$(_c3, \"GifPicker\");","map":{"version":3,"names":["React","useState","useEffect","lazy","Button","TextField","CircularProgress","Typography","Paper","Grid","Dialog","DialogTitle","DialogContent","DialogActions","Search","jsxDEV","_jsxDEV","API_KEY","LazyGifPicker","_c","_c2","GifPicker","_s","query","setQuery","gifs","setGifs","loading","setLoading","error","setError","copied","setCopied","limitExceeded","setLimitExceeded","suggestions","setSuggestions","openAboutDialog","setOpenAboutDialog","requestCount","setRequestCount","lastRequestTimestamp","setLastRequestTimestamp","fetchRandomGifs","response","fetch","data","json","status","gifData","map","gif","id","images","console","checkApiLimit","currentTime","Date","now","timeDiff","handleInputChange","event","value","target","trim","encodeURIComponent","suggestionsData","suggestion","name","handleSuggestionClick","preventDefault","searchGifs","searchQuery","queryValue","copyToClipboard","url","navigator","clipboard","writeText","setTimeout","handleKeyPress","key","handleAboutClick","handleAboutClose","style","maxWidth","margin","children","display","alignItems","label","onChange","variant","fullWidth","onKeyPress","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","marginLeft","length","position","marginTop","cursor","padding","fontWeight","backgroundColor","marginBottom","borderRadius","container","spacing","item","xs","flexDirection","autoPlay","loop","src","fixed_width","mp4","width","open","onClose","href","rel","autoFocus","_c3","$RefreshReg$"],"sources":["/Users/sayalideshmukh/new-giphy-app/src/GifPicker.tsx"],"sourcesContent":["import React, { useState, useEffect, ChangeEvent, KeyboardEvent, lazy, Suspense } from \"react\";\nimport { Button, TextField, CircularProgress, Typography, Paper, Grid, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport { Search } from \"@material-ui/icons\";\n\nconst API_KEY = \"oWMik3POHlNAyTrd6mVPMIpR20X0Lw1E\";\n\ninterface Gif {\n  id: string;\n  images: {\n    fixed_width: {\n      mp4: string;\n    };\n  };\n}\n\nconst LazyGifPicker: React.FC = lazy(() => import(\"./GifPicker\"));\n\nconst GifPicker: React.FC = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [copied, setCopied] = useState<string>(\"\");\n  const [limitExceeded, setLimitExceeded] = useState<boolean>(false);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [openAboutDialog, setOpenAboutDialog] = useState<boolean>(false);\n  const [requestCount, setRequestCount] = useState<number>(0);\n  const [lastRequestTimestamp, setLastRequestTimestamp] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchRandomGifs = async () => {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=3`\n        );\n        const data = await response.json();\n\n        if (response.status === 429) {\n          setLimitExceeded(true);\n        } else {\n          const gifData = data.data.map((gif: any) => ({\n            id: gif.id,\n            images: gif.images,\n          }));\n          setGifs(gifData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching random GIFs:\", error);\n      }\n    };\n\n    fetchRandomGifs();\n  }, []);\n\n  useEffect(() => {\n    const checkApiLimit = () => {\n      const currentTime = Date.now();\n      const timeDiff = currentTime - (lastRequestTimestamp || 0);\n\n      if (requestCount >= 42 && timeDiff < 3600000) {\n        setLimitExceeded(true); // Set limitExceeded state variable to true\n      } else if (requestCount >= 1000 && timeDiff < 86400000) {\n        setLimitExceeded(true); // Set limitExceeded state variable to true\n      } else {\n        setLimitExceeded(false); // Reset the limitExceeded state variable\n      }\n    };\n\n    checkApiLimit();\n  }, [requestCount, lastRequestTimestamp]);\n  \n  const handleInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    try {\n      if (value.trim() !== \"\") {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search/tags?api_key=${API_KEY}&q=${encodeURIComponent(\n            value\n          )}&limit=5`\n        );\n        const data = await response.json();\n\n        if (response.status === 200) {\n          const suggestionsData = data.data.map((suggestion: any) => suggestion.name);\n          setSuggestions(suggestionsData);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching search suggestions:\", error);\n    }\n  };\n\n\n  const handleSuggestionClick = async (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    suggestion: string\n  ) => {\n    event.preventDefault();\n    setQuery(suggestion);\n    await searchGifs(suggestion);\n  };\n\n  const searchGifs = async (searchQuery?: string) => {\n    setSuggestions([]); // Clear suggestions\n  \n    const queryValue = searchQuery || query;\n    if (queryValue.trim() === \"\") {\n      return;\n    }\n  \n    setLoading(true);\n    setError(false);\n    setGifs([]);\n    setLimitExceeded(false); // Reset the limit exceeded state\n  \n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURIComponent(\n          queryValue\n        )}&limit=10&format=mp4` // Specify format=mp4\n      );\n  \n      if (response.status === 429) {\n        setLimitExceeded(true); // Set the limit exceeded state\n      } else {\n        const data = await response.json();\n        const gifData = data.data.map((gif: any) => ({\n          id: gif.id,\n          images: gif.images,\n        }));\n        setGifs(gifData);\n      }\n    } catch (error) {\n      console.error(\"Error searching GIFs:\", error);\n      setError(true);\n    }\n  \n    setLoading(false);\n  };\n  \n\n  const copyToClipboard = (url: string) => {\n    navigator.clipboard.writeText(url);\n    setCopied(url);\n    setTimeout(() => {\n      setCopied(\"\");\n    }, 1500);\n  };\n\n  const handleKeyPress = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      searchGifs();\n    }\n  };\n\n  const handleAboutClick = () => {\n    setOpenAboutDialog(true);\n  };\n\n  const handleAboutClose = () => {\n    setOpenAboutDialog(false);\n  };\n\n  return (\n    <div style={{ maxWidth: 600, margin: \"0 auto\" }}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <TextField\n          label=\"Search for GIFs\"\n          value={query}\n          onChange={handleInputChange}\n          variant=\"outlined\"\n          fullWidth\n          onKeyPress={handleKeyPress}\n          style={{ marginRight: 8 }}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => searchGifs()}>\n          <Search />\n        </Button>\n        <Button variant=\"outlined\" onClick={handleAboutClick} style={{ marginLeft: 8 }}>\n          About\n        </Button>\n      </div>\n      {suggestions.length > 0 && (\n        <Paper style={{ position: \"relative\", marginTop: 16 }}>\n          {suggestions.map((suggestion) => (\n            <Typography\n              key={suggestion}\n              variant=\"body2\"\n              onClick={(event) => handleSuggestionClick(event as any, suggestion)}\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n                padding: 8,\n                fontWeight: \"bold\",\n                color: \"white\",\n                backgroundColor: \"#4caf50\",\n                marginBottom: 8,\n                borderRadius: 4,\n              }}\n            >\n              {suggestion}\n            </Typography>\n          ))}\n        </Paper>\n      )}\n\n      {loading && <CircularProgress style={{ marginTop: 16 }} />}\n      {limitExceeded && (\n        <Typography color=\"error\" style={{ marginTop: 16 }}>\n          API limit exceeded. Please try again later.\n        </Typography>\n      )}\n      \n      {error && <Typography color=\"error\" style={{ marginTop: 16 }}>Error fetching GIFs.</Typography>}\n      <Grid container spacing={2} style={{ marginTop: 16 }}>\n        {gifs.length > 0 ? (\n          gifs.map((gif) => (\n            <Grid item xs={4} key={gif.id}>\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                <video autoPlay loop src={gif.images.fixed_width.mp4} style={{ width: \"100%\", marginBottom: 8 }}></video>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => copyToClipboard(gif.images.fixed_width.mp4)}\n                  style={{\n                    width: \"100%\",\n                    backgroundColor: \"#2196f3\",\n                    color: \"white\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {copied === gif.images.fixed_width.mp4 ? \"Copied!\" : \"Copy to Clipboard\"}\n                </Button>\n              </div>\n            </Grid>\n          ))\n        ) : (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" style={{ color: \"white\", backgroundColor: \"#f44336\", padding: 8, borderRadius: 4 }}>\n              No GIFs found.\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n      <Dialog open={openAboutDialog} onClose={handleAboutClose}>\n        <DialogTitle>About GIPHY</DialogTitle>\n        <DialogContent>\n          <Typography>\n            GIPHY is an online database and search engine that allows users to search for and share animated GIF files.\n            You can find more information about GIPHY on their website:\n          </Typography>\n          <Typography>\n            <a href=\"https://giphy.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              https://giphy.com/\n            </a>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAboutClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default GifPicker;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}